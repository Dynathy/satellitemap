Calculating the real-time position of satellites using TLE (Two-Line Element) data involves using a library like Skyfield or PyEphem in Python. These libraries can interpret TLE data to provide the current location (latitude, longitude, altitude) of the satellites. We'll use Skyfield here because of its simplicity and accuracy.

### Steps to Calculate Satellite Position with Skyfield

1. **Install Skyfield**:
   - If not already installed, you can install Skyfield via pip:
     ```
     pip install skyfield
     ```

2. **Import Skyfield Modules**:
   - Import necessary modules from Skyfield for loading TLE data and performing calculations.

3. **Load TLE Data and Create Satellite Objects**:
   - Use the TLE data to create satellite objects. Skyfield can read TLE data directly from strings.

4. **Calculate Positions**:
   - Calculate the satellite's position for a given time. Skyfield uses a timescale object for handling dates and times.

5. **Convert Positions to Geographic Coordinates**:
   - Convert the calculated positions to geographic coordinates (latitude, longitude, altitude).

### Example Python Script

Here's a basic script that demonstrates these steps:

```python
from skyfield.api import Topos, load
from datetime import datetime

def create_satellite(tle1, tle2):
    # Load the TLE data into a satellite object
    satellites = load.tle_file('http://celestrak.com/NORAD/elements/stations.txt')
    satellite = satellites[0]
    return satellite

def get_current_position(satellite):
    # Use the current time
    ts = load.timescale()
    time = ts.now()

    # Calculate the satellite's position at the current time
    geocentric = satellite.at(time)

    # Get the geographic position (lat, long, alt)
    subpoint = geocentric.subpoint()
    return subpoint.latitude.degrees, subpoint.longitude.degrees, subpoint.elevation.m

# TLE data for a satellite
tle1 = '1 25544U 98067A   21010.91667824  .00001264  00000-0  35036-4 0  9992'
tle2 = '2 25544  51.6441 161.3405 0001728  15.3450 344.8204 15.48915117265678'

# Create the satellite object
satellite = create_satellite(tle1, tle2)

# Get the current position
latitude, longitude, altitude = get_current_position(satellite)
print(f"Latitude: {latitude}, Longitude: {longitude}, Altitude: {altitude} m")
```

### How to Run the Script
- Save the script in a `.py` file.
- Run it using a Python interpreter.

This script demonstrates how to calculate the real-time position of a satellite using Skyfield. You can adapt this script to handle multiple satellites or to integrate it into a larger application, such as a tracking system with visualizations.
